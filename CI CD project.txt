Section-I
1) Introduction:
	Developers writing the code and pushed into the git repository,
whenever code is available in git jenkins pull the code and do the build,
once build is completed it generates artifacts. Artifact should depoly in Docker container or Kubernetes cluster. 
To deploy target environment ansible is came into the picture to deploy the application

2) Setup ci-cd with jenkins,git, maven and tomcat
	setup jenkins
	run a test job
	setup & configure maven and git
	set tomcat server
	install plugins
	integrate git maven in jenkins job
	run ci cd job
		git github jekins ec2(artifactory)

	Docker:
	setting up docker environment
	managing docker with ansible
	docker hub repository
	docker file
	run job

	Integration with ansible:
	setting up ansible environment
	intgrating ansible with jenkins
	writing a ansible playbook to deploy on container
	run job
		git github jekins ansible docker

	Kubernes:
	setting up kubernetes environment
	writing deployment and service files
	run a job
		git github jekins ansible docker Kubernetess

3) What is CI & CD
	CI: Developers push the code into souce code management systems, once code is available in scm, then Jenkins could identify code and pull the code automatically and run build and unit test at the end of successfull continous integration process, we will get artifacts. 
	Deploying these artifacts in target environement(staging-run integration test, load test, performance test, funtional) we call it as a Continuous delivery, if build is stable then going to deploy in production environment with manual manner
	whereas continous deployment build is going deploy from staging to production environment as automatic manner is called contious deployment

4) Resources to setup simple CI/CD Pipeline:
	github.com/yankils
	
5)	clone below github repo
	github.com/yankils/hello-world
 	github.com/yankils/Simple-Devops-Project

Section-II (CI-CD Pipeline using Git, Jenkins and Maven)
6)	Jenkins Installation:
 	 git		      Jenkins			   ec2-instance
      	continous build		       War file deployment	

 	Install Jenkins on AWS EC2:-
	 Prerequisites
	 EC2 Instance
	 Security Group with Port 8080 open
	 Java v1.8.x

 	We will be using open java for our demo, Get the latest version from http://openjdk.java.net/install/

	 yum install java-1.8*
	 java -version
	 find /usr/lib/jvm/java-1.8* | head -n 3
	 # To set it permanently update your .bash_profile
	 vi ~/.bash_profile
	 JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.50.amzn1.x86_64
 	PATH=$PATH:$HOME/bin:$JAVA_HOME
	 echo $JAVA_HOME (check path-logout & login)
 
	Install Jenkins:
	You can install jenkins using the rpm or by setting up the repo. We will set up the repo so that we can update it easily in the future.

	Get the latest version of jenkins from https://pkg.jenkins.io/redhat-stable/ and install

	yum -y install wget
	sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
	sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
	yum -y install jenkins

	Start Jenkins
 	# Start jenkins service
	service jenkins start

	# Setup Jenkins to start at boot,
	chkconfig jenkins on

	Accessing Jenkins
	By default jenkins runs at port 8080, You can access jenkins at

	http://YOUR-SERVER-PUBLIC-IP:8080
	Configure Jenkins
	The default Username is admin
	Grab the default password
	Password Location:/var/lib/jenkins/secrets/initialAdminPassword
	Skip Plugin Installation; We can do it later
	Change admin password
	Admin > Configure > Password
	Configure java path
	Manage Jenkins > Global Tool Configuration > JDK
	Name: JAVA_HOME
	JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.50.amzn1.x86_64

7) first Jenkins Job:
	Create another admin user id
	Test Jenkins Jobs
	Create “new item”
	Enter an item name – My-First-Project
	Chose Freestyle project
	Under the Build section Execute shell: echo "Welcome to Jenkins Demo"
	Save your job
	Build job
	Check "console output"

8) Install & setup Git:
	Configure Git pulgin on Jenkins:
	Git is one of the most popular tools for version control system. you can pull code from git repositories using jenkins if you use github plugin.

	Prerequisites:
	Jenkins server
	Install Git on Jenkins server
	Install git packages on jenkins server
	yum install git -y
	Setup Git on jenkins console
	Install git plugin without restart

	Manage Jenkins > Jenkins Plugins > available > github
	Configure git path

	Manage Jenkins > Global Tool Configuration > git

9) Setup-Maven:
	Install & configure Maven build tool on Jenkins:
	Maven is a code build tool which used to convert your code to an artifact. this is a widely used plugin to build in continuous integration

	Prerequisites
	Jenkins server
	Install Maven on Jenkins
	Download maven packages https://maven.apache.org/download.cgi onto Jenkins server. In this case, I am using /opt/maven as my installation directory
	Link : https://maven.apache.org/download.cgi
	 # Creating maven directory under /opt
	 mkdir /opt/maven
	 cd /opt/maven
	 # downloading maven version 3.6.0
	 wget http://mirrors.estointernet.in/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
	 tar -xvzf apache-maven-3.6.1-bin.tar.gz
	Setup M2_HOME and M2 paths in .bash_profile of the user and add these to the path variable
	M2_HOME=/opt/maven/apache-maven-3.6.1
	M2=$M2_HOME/bin
	PATH=<Existing_PATH>:$M2_HOME:$M2
	Checkpoint
	logoff and login to check maven version

	mvn --version
	So far we have completed the installation of maven software to support maven plugin on the jenkins console. Let's jump onto Jenkins to complete the remaining 		steps.
	
	Setup maven on Jenkins console
	Install maven plugin without restart
	Manage Jenkins > Jenkins Plugins > available > Maven Invoker
	Manage Jenkins > Jenkins Plugins > available > Maven Integration
	Configure maven path
	Manage Jenkins > Global Tool Configuration > Maven-->Name: M2_HOME / MAVEN_HOME	: /opt/maven

10) Create first maven Job:
	Create a First Maven Jenkins job to build hello-world project
	Jenkins Job name: My_First_Maven_Build
	We know how to use work with each and Git, Jenkins independently. What if you want to collaborate these two? that is where Simple DevOps project helps you. 	Follow the below steps if you are a new guy to DevOps. You love it.

	Pre-requisites
	Jenkins server
	Steps to create "My_First_Maven_Build" Jenkin job
	Login to Jenkins console
	Create Jenkins job, Fill the following details,
	Source Code Management:
	Repository: https://github.com/yankils/hello-world.git
	Branches to build : */master
	Build:
	Root POM:pom.xml
	Goals and options: clean install package
	(u can see target directory under workspace, it has war file, these files available in cd /var/lib/jenkins/workspace)
