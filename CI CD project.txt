Section-I
*********
1) Introduction:
	Developers writing the code and pushed into the git repository,
whenever code is available in git jenkins pull the code and do the build,
once build is completed it generates artifacts. Artifact should depoly in Docker container or Kubernetes cluster. 
To deploy target environment ansible is came into the picture to deploy the application

2) Setup ci-cd with jenkins,git, maven and tomcat
	setup jenkins
	run a test job
	setup & configure maven and git
	set tomcat server
	install plugins
	integrate git maven in jenkins job
	run ci cd job
		git github jekins ec2(artifactory)

	Docker:
	setting up docker environment
	managing docker with ansible
	docker hub repository
	docker file
	run job

	Integration with ansible:
	setting up ansible environment
	intgrating ansible with jenkins
	writing a ansible playbook to deploy on container
	run job
		git github jekins ansible docker

	Kubernes:
	setting up kubernetes environment
	writing deployment and service files
	run a job
		git github jekins ansible docker Kubernetess

3) What is CI & CD
	CI: Developers push the code into souce code management systems, once code is available in scm, then Jenkins could identify code and pull the code automatically and run build and unit test at the end of successfull continous integration process, we will get artifacts. 
	Deploying these artifacts in target environement(staging-run integration test, load test, performance test, funtional) we call it as a Continuous delivery, if build is stable then going to deploy in production environment with manual manner
	whereas continous deployment build is going deploy from staging to production environment as automatic manner is called contious deployment

4) Resources to setup simple CI/CD Pipeline:
	github.com/yankils
	
5)	clone below github repo
	github.com/yankils/hello-world
 	github.com/yankils/Simple-Devops-Project

Section-II (CI-CD Pipeline using Git, Jenkins and Maven)
********************************************************
6)	Jenkins Installation:
 	 git		      Jenkins			   ec2-instance
      	     continous build	      War file deployment	

 	Install Jenkins on AWS EC2:-
	 Prerequisites
	 EC2 Instance
	 Security Group with Port 8080 open
	 Java v1.8.x

 	We will be using open java for our demo, Get the latest version from http://openjdk.java.net/install/

	 yum install java-1.8*
	 java -version
	 find /usr/lib/jvm/java-1.8* | head -n 3
	 # To set it permanently update your .bash_profile
	 vi ~/.bash_profile
	 JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.50.amzn1.x86_64
 	 PATH=$PATH:$HOME/bin:$JAVA_HOME
	 echo $JAVA_HOME (check path-logout & login)
 
	Install Jenkins:
	You can install jenkins using the rpm or by setting up the repo. We will set up the repo so that we can update it easily in the future.

	Get the latest version of jenkins from https://pkg.jenkins.io/redhat-stable/ and install

	yum -y install wget
	sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
	sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
	yum -y install jenkins

	Start Jenkins
 	# Start jenkins service
	service jenkins start

	# Setup Jenkins to start at boot,
	chkconfig jenkins on

	Accessing Jenkins
	By default jenkins runs at port 8080, You can access jenkins at

	http://YOUR-SERVER-PUBLIC-IP:8080
	Configure Jenkins
	The default Username is admin
	Grab the default password
	Password Location:/var/lib/jenkins/secrets/initialAdminPassword
	Skip Plugin Installation; We can do it later
	Change admin password
	Admin > Configure > Password
	Configure java path
	Manage Jenkins > Global Tool Configuration > JDK
	Name: JAVA_HOME
	JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.50.amzn1.x86_64

7) first Jenkins Job:
	Create another admin user id
	Test Jenkins Jobs
	Create “new item”
	Enter an item name – My-First-Project
	Chose Freestyle project
	Under the Build section Execute shell: echo "Welcome to Jenkins Demo"
	Save your job
	Build job
	Check "console output"

8) Install & setup Git:
	Configure Git pulgin on Jenkins:
	Git is one of the most popular tools for version control system. you can pull code from git repositories using jenkins if you use github plugin.

	Prerequisites:
	Jenkins server
	Install Git on Jenkins server
	Install git packages on jenkins server
	yum install git -y
	Setup Git on jenkins console
	Install git plugin without restart

	Manage Jenkins > Jenkins Plugins > available > github
	Configure git path

	Manage Jenkins > Global Tool Configuration > git

9) Setup-Maven:
	Install & configure Maven build tool on Jenkins:
	Maven is a code build tool which used to convert your code to an artifact. this is a widely used plugin to build in continuous integration

	Prerequisites
	Jenkins server
	Install Maven on Jenkins
	Download maven packages https://maven.apache.org/download.cgi onto Jenkins server. In this case, I am using /opt/maven as my installation directory
	Link : https://maven.apache.org/download.cgi
	 # Creating maven directory under /opt
	 mkdir /opt/maven
	 cd /opt/maven
	 # downloading maven version 3.6.0
	 wget http://mirrors.estointernet.in/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
	 tar -xvzf apache-maven-3.6.1-bin.tar.gz
	Setup M2_HOME and M2 paths in .bash_profile of the user and add these to the path variable
	M2_HOME=/opt/maven/apache-maven-3.6.1
	M2=$M2_HOME/bin
	PATH=<Existing_PATH>:$M2_HOME:$M2
	Checkpoint
	logoff and login to check maven version

	mvn --version
	So far we have completed the installation of maven software to support maven plugin on the jenkins console. Let's jump onto Jenkins to complete the remaining 		steps.
	
	Setup maven on Jenkins console
	Install maven plugin without restart
	Manage Jenkins > Jenkins Plugins > available > Maven Invoker
	Manage Jenkins > Jenkins Plugins > available > Maven Integration
	Configure maven path
	Manage Jenkins > Global Tool Configuration > Maven-->Name: M2_HOME / MAVEN_HOME	: /opt/maven

10) Create first maven Job:
	Create a First Maven Jenkins job to build hello-world project
	Jenkins Job name: My_First_Maven_Build
	
	Pre-requisites
	Jenkins server
	Steps to create "My_First_Maven_Build" Jenkin job
	Login to Jenkins console
	Create Jenkins job, Fill the following details,
	Source Code Management:
	Repository: https://github.com/yankils/hello-world.git
	Branches to build : */master
	Build:
	Root POM:pom.xml
	Goals and options: clean install package
	(u can see target directory under workspace, it has war file, these files are available in cd /var/lib/jenkins/workspace)


Section-III (Integrating tomcat server in CI-CD Pipeline)
***********************************************
11) Tomcat server setup:
	Tomcat installation on EC2 instance
	Pre-requisites
	EC2 instance with Java v1.8.x
	Install Apache Tomcat Download tomcat packages from https://tomcat.apache.org/download-80.cgi onto /opt on EC2 instance

	# Create tomcat directory
	cd /opt
	wget http://mirrors.fibergrid.in/apache/tomcat/tomcat-8/v8.5.35/bin/apache-tomcat-8.5.35.tar.gz
	tar -xvzf /opt/apache-tomcat-8.5.35.tar.gz
	give executing permissions to startup.sh and shutdown.sh which are under bin.

	chmod +x /opt/apache-tomcat-8.5.35/bin/startup.sh 
	shutdown.sh
	create link files for tomcat startup.sh and shutdown.sh

	ln -s /opt/apache-tomcat-8.5.53/bin/startup.sh /usr/local/bin/tomcatup
	ln -s /opt/apache-tomcat-8.5.53/bin/shutdown.sh /usr/local/bin/tomcatdown
	tomcatup
	Check point :
	access tomcat application from browser on port 8080

	http://<Public_IP>:8080
	Using unique ports for each application is a best practice in an environment. But tomcat and Jenkins runs on ports number 8080. Hence lets change tomcat port 	number to 8090. Change port number in conf/server.xml file under tomcat home

	cd /opt/apache-tomcat-8.5.53/conf
	# update port number in the "connecter port" field in server.xml
	# restart tomcat after configuration update
	tomcatdown
	tomcatup
	Check point :
	Access tomcat application from browser on port 8090

	http://<Public_IP>:8090
	now application is accessible on port 8090. but tomcat application doesnt allow to login from browser. changing a default parameter in context.xml does address this issue
	#search for context.xml
	find / -name context.xml
	above command gives 3 context.xml files. comment () Valve ClassName field on files which are under webapp directory. After that restart tomcat services to 
	effect these changes (/opt/tomcat/webapps/META-INF/context.xml,/opt/tomcat/webapps/host-manager/META-INF/context.xml) 
	
	tomcatdown
	tomcatup
	Update users information in the tomcat-users.xml file goto tomcat home directory and Add below users to conf/tomcat-user.xml file
	 <role rolename="manager-gui"/>
	 <role rolename="manager-script"/>
	 <role rolename="manager-jmx"/>
	 <role rolename="manager-status"/>
	 <user username="admin" password="admin" roles="manager-gui, manager-script, manager-jmx, manager-status"/>
	 <user username="deployer" password="deployer" roles="manager-script"/>
	 <user username="tomcat" password="s3cret" roles="manager-gui"/>
	Restart serivce and try to login to tomcat application from the browser. This time it should be Successful

12) Deploy WAR file on Tomcat vm using jenkins:
	
	Git-->GitHub-->Jenkins-->Tomcat	(war/ear : **/*.war & tomcat URL)
			(war file deployment)

15) Deploy VM through poll scm:
	Build triggers : Poll /scM: * * * * * (run the job) 


Section-IV (Integrating Docker in ci-cd pipeline
************************************************
	git hub --> Jenkins---> Docker
16) Docker setup:
	Pre-requisites:
	Amazon Linux EC2 Instance
	Installation Steps
	Install docker and start docker services
	yum install docker -y
	docker --version 

	# start docker services
	service docker start
	service docker status
	Create a user called dockeradmin
	useradd dockeradmin
	passwd dockeradmin
	add a user to docker group to manage docker
	usermod -aG docker dockeradmin
	Validation test
	Create a tomcat docker container by pulling a docker image from the public docker registry
	docker run -d --name test-tomcat-server -p 8090:8080 tomcat:latest
	

17) Latest tomcat docker issue: webapps.dist --> files copied to webapps

18) Integrating docker with jenkins:
	for integration install "publish over ssh" plugin in jenkins (Send build artifacts over SSH)
	
	add dockeradmin in jenkins
	jenkins-> configure system -> publish over ssh
	
	SSH Server Name : docker-host
	Hostname	: private ip of docker host
	Username	: dockeradmin
	Passphrase / Password	:
	
	enable password based authentication on docker-host ->vi /etc/ssh/sshd_config : PasswordAuthentication yes
	restart sshd service: service sshd reload
	
19)  copy artifacts to docker host: 
above jenkins job:
	post build actions -->
		send build artifact over ssh -->
			ssh server name: docker-host
			transfer set: webapp/target/*.war
			remove prefix: webapp/target
			remote directory: .
		 --save..apply (.war file copied to docker-host home directory)
	

20) create docker file: and build & run tomcat container with webpp.war :
    vi Dockerfile
	FROM tomcat:latest

	COPY ./webapp.war /usr/local/tomcat/webapps
	:wq
    docker build -t docker-container-war .
    docker run -d --name docker-project-war -p 8080:8080 docker-container-war
    check web access --> <docker-host: public ip :8080>/webapp
    
 21) deploy war file on docker container using jenkins:
 	delete .war file in docker host, running containers and keep Dockerfile
	same as (19)
	post build actions -->
		send build artifact over ssh -->
			ssh server name: docker-host
			transfer set: webapp/target/*.war
			remove prefix: webapp/target
			remote directory: .
			exec command: cd /home/dockeradmin; docker build -t devops-image .; docker run -d --name devops-container -p 8080:8080 devops-image
			save , apply, run : build now
	
  
Section 5: Integrating ansible in ci/cd pipeline:
*************************************************

23) Ansible setup:

Ansible Installation
Ansible is an open-source automation platform. Ansible can help you with configuration management, application deployment, task automation.

Pre-requisites
An AWS EC2 instance (on Control node)
Installation steps:
on Amazon EC2 instance
Install python and python-pip

yum install python
yum install python-pip
Install ansible using pip check for version

pip install ansible
ansible --version
Create a user called ansadmin (on Control node and Managed host)

useradd ansadmin
passwd ansadmin
Below command grant sudo access to ansadmin user. But we strongly recommended using "visudo" command if you are aware vi or nano editor. (on Control node and Managed host)

echo "ansadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
Log in as a ansadmin user on master and generate ssh key (on Control node)

ssh-keygen
Copy keys onto all ansible managed hosts (on Control node)

(create ansadmin user in docker host)
ssh-copy-id ansadmin@<target-server>
Ansible server used to create images and store on docker registry. Hence install docker, start docker services and add ansadmin to the docker group.

yum install docker

# start docker services 
service docker start
service docker start 

# add user to docker group 
usermod -aG docker ansadmin
Create a directory /etc/ansible and create an inventory file called "hosts" add control node and managed hosts IP addresses to it.

Validation test
Run ansible command as ansadmin user it should be successful (Master)
ansible all -m ping

25) Ansible integration with Jenkins

Prerequisites: Ansible server, Jenkins Server

Install "publish Over SSH"

Manage Jenkins > Manage Plugins > Available > Publish over SSH
Enable connection between Ansible and Jenkins

Manage Jenkins > Configure System > Publish Over SSH > SSH Servers

SSH Servers:
Hostname:<ServerIP>
username: ansadm
password: *******
Test the connection "Test Connection"
